generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EUserRole {
  SUPERADMIN
  RECEPCIONISTA
  VETERINARIO
}

enum EAppointmentStatus {
  PENDIENTE
  CANCELADO
  CONFIRMADO
  NO_ASISTIDO
  COMPLETO
}

enum EPetGender {
  MACHO
  HEMBRA
}

enum EPetSpecies {
  PERRO
  GATO
  AVE
  REPTIL
  OTRO
}

enum EWeekDay {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      EUserRole @default(RECEPCIONISTA)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  scheduleConfig ScheduleConfig?

  appointments Appointment[]

  @@map("users")
}

model Owner {
  id        String   @id @default(uuid())
  name      String
  lastname  String
  dni       String   @unique
  email     String?
  phone     String   @unique
  address   String
  pets      Pet[]    @relation("OwnerPets")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("owners")
}

model Pet {
  id           String        @id @default(uuid())
  name         String
  species      EPetSpecies
  breed        String
  birthdate    DateTime
  gender       EPetGender
  ownerId      String
  appointments Appointment[]
  owner        Owner         @relation("OwnerPets", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("pets")
}

model ScheduleConfig {
  id        String              @id @default(uuid())
  vetId     String              @unique
  vet       User                @relation(fields: [vetId], references: [id], onDelete: Cascade)
  days      ScheduleConfigDay[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("schedule_configs")
}

model ScheduleConfigDay {
  id         String         @id @default(uuid())
  scheduleId String
  weekday    EWeekDay
  startTime  Int            @default(480) // 8:00
  endTime    Int            @default(1080) // 18:00
  isActive   Boolean        @default(false)
  schedule   ScheduleConfig @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([scheduleId, weekday])
  @@map("schedule_config_days")
}

model ClinicalService {
  id           String                       @id @default(uuid())
  name         String                       @unique
  description  String?
  price        Float
  duration     Int
  isActive     Boolean                      @default(true)
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt
  appointments AppointmentClinicalService[]

  @@map("clinical_services")
}

model Appointment {
  id               String                       @id @default(uuid())
  petId            String
  pet              Pet                          @relation(fields: [petId], references: [id], onDelete: Cascade)
  vetId            String
  vet              User                         @relation(fields: [vetId], references: [id], onDelete: Cascade)
  description      String?
  services         AppointmentClinicalService[]
  extraTime        Int?
  extraPrice       Float?
  extraPriceReason String?
  extraTimeReason  String?
  date             DateTime
  startTime        Int
  duration         Int
  status           EAppointmentStatus           @default(PENDIENTE)
  cancelReason     String?
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt

  @@index([date, vetId])
  @@index([petId])
  @@index([status])
  @@map("appointments")
}

model AppointmentClinicalService {
  appointmentId     String
  clinicalServiceId String

  appointment     Appointment     @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  clinicalService ClinicalService @relation(fields: [clinicalServiceId], references: [id], onDelete: Cascade)

  @@id([appointmentId, clinicalServiceId])
  @@map("appointments_clinical_services")
}
